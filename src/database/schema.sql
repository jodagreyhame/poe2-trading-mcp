-- POE2Scout Cache Database Schema
-- SQLite schema for L2 cache persistence layer

-- Enable WAL mode for better concurrent access
PRAGMA journal_mode = WAL;
PRAGMA synchronous = NORMAL;
PRAGMA cache_size = 10000;
PRAGMA temp_store = memory;
PRAGMA mmap_size = 268435456; -- 256MB

-- Main cache entries table
CREATE TABLE IF NOT EXISTS cache_entries (
    key TEXT PRIMARY KEY,           -- Cache key (generated by KeyGenerator)
    value BLOB NOT NULL,            -- Cached data (JSON or compressed)
    data_type TEXT NOT NULL,        -- Type of cached data (leagues, items, etc.)
    ttl INTEGER NOT NULL,           -- Expiration timestamp (milliseconds)
    created_at INTEGER NOT NULL,    -- Creation timestamp (milliseconds)
    last_accessed INTEGER NOT NULL, -- Last access timestamp (milliseconds)
    compressed INTEGER NOT NULL DEFAULT 0, -- Whether data is compressed (0/1)
    access_count INTEGER NOT NULL DEFAULT 1 -- Number of times accessed
);

-- Cache metadata table for storing configuration and stats
CREATE TABLE IF NOT EXISTS cache_metadata (
    key TEXT PRIMARY KEY,
    value TEXT NOT NULL
);

-- Indexes for better performance
CREATE INDEX IF NOT EXISTS idx_cache_data_type ON cache_entries(data_type);
CREATE INDEX IF NOT EXISTS idx_cache_ttl ON cache_entries(ttl);
CREATE INDEX IF NOT EXISTS idx_cache_created_at ON cache_entries(created_at);
CREATE INDEX IF NOT EXISTS idx_cache_last_accessed ON cache_entries(last_accessed);
CREATE INDEX IF NOT EXISTS idx_cache_access_count ON cache_entries(access_count);

-- Compound index for common queries
CREATE INDEX IF NOT EXISTS idx_cache_type_ttl ON cache_entries(data_type, ttl);

-- Initialize metadata
INSERT OR IGNORE INTO cache_metadata (key, value) VALUES 
('schema_version', '1.0'),
('created_at', strftime('%s000', 'now')),
('last_vacuum', '0');

-- View for cache statistics
CREATE VIEW IF NOT EXISTS cache_stats AS
SELECT 
    data_type,
    COUNT(*) as total_entries,
    COUNT(CASE WHEN ttl > strftime('%s000', 'now') THEN 1 END) as active_entries,
    COUNT(CASE WHEN ttl <= strftime('%s000', 'now') THEN 1 END) as expired_entries,
    SUM(LENGTH(value)) as total_size_bytes,
    AVG(access_count) as avg_access_count,
    MIN(created_at) as oldest_entry,
    MAX(created_at) as newest_entry,
    MAX(last_accessed) as most_recent_access
FROM cache_entries 
GROUP BY data_type;

-- View for LRU candidates (least recently used)
CREATE VIEW IF NOT EXISTS lru_candidates AS
SELECT 
    key,
    data_type,
    last_accessed,
    access_count,
    LENGTH(value) as size_bytes,
    (strftime('%s000', 'now') - last_accessed) as age_ms
FROM cache_entries 
WHERE ttl > strftime('%s000', 'now')
ORDER BY last_accessed ASC;

-- View for cache health monitoring
CREATE VIEW IF NOT EXISTS cache_health AS
SELECT 
    COUNT(*) as total_entries,
    COUNT(CASE WHEN ttl > strftime('%s000', 'now') THEN 1 END) as active_entries,
    ROUND(
        CAST(COUNT(CASE WHEN ttl > strftime('%s000', 'now') THEN 1 END) AS FLOAT) / 
        COUNT(*) * 100, 2
    ) as active_percentage,
    SUM(LENGTH(value)) as total_size_bytes,
    COUNT(CASE WHEN compressed = 1 THEN 1 END) as compressed_entries,
    ROUND(
        CAST(COUNT(CASE WHEN compressed = 1 THEN 1 END) AS FLOAT) / 
        COUNT(*) * 100, 2
    ) as compression_percentage
FROM cache_entries;

-- Trigger to automatically update last_accessed on reads
-- Note: This is handled in application code for better control

-- Cleanup function (stored as metadata for scheduled execution)
-- DELETE FROM cache_entries WHERE ttl <= strftime('%s000', 'now');